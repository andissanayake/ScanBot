services:
  api:
    image: ${DOCKER_REGISTRY-}api
    build:
      context: .
      dockerfile: src/Api/Dockerfile
    ports:
      - "1001:8080"
      - "1002:8081"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
      - SQL_SERVER=sqlserver
      - SQL_USER=sa
      - SQL_PASSWORD=YourStrong!Passw0rd
    depends_on:
      - postgres 
      - rabbitmq
    volumes:
      - shared-data:/app/wwwroot
  web:
    build: 
        context: src/web
    ports:
      - "1000:1000"
    volumes:
      - .:/web
    command: npm run dev
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"   # RabbitMQ default port
      - "15672:15672" # RabbitMQ Management UI
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      retries: 5
      start_period: 10s
      timeout: 10s
  postgres:
    build:
      context: src/Postgres
    container_name: postgres
    environment:
      POSTGRES_DB: UnifiedAppDb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: YourStrong!Passw0rd
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user"]
      interval: 30s
      retries: 5
      start_period: 10s
      timeout: 10s
  document:
    build: 
        context: src/Document
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_QUEUE=documentQueue
    volumes:
      - shared-data:/app/wwwroot
    command: ["python", "processor2.py"]
  document-api:
    build:
      context: src/DocumentApi
      dockerfile: Dockerfile  # Specify your Dockerfile if itâ€™s not named 'Dockerfile'
    ports:
      - "8000:8000"  # Map port 8000 on the host to port 8000 in the container
    #volumes:
    #  - .:/app  # Mount the current directory to /app in the container (for live reload during development)
    depends_on:
      postgres:
        condition: service_healthy
    command: ["uvicorn", "api:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
volumes:
  sql_data:
  rabbitmq-data: 
  postgres_data:
  shared-data:  